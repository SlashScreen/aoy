--- @meta

--- @class AddonInfoPacket
--- @field name string
--- @field desc string? Short description of the Addon.
--- @field author string Author of the Addon.
--- @field date string? Date of creation or last update.
--- @field license string? License information.
--- @field layer integer Determines the order in which Addons are called.
--- @field enabled boolean Whether the Addon is enabled by default.
--- @field handler boolean? If true, Addon has access to the handler.

--- @class AddonInfo
--- @field name string
--- @field desc string Short description of the Addon.
--- @field author string Author of the Addon.
--- @field date string Date of creation or last update.
--- @field license string License information.
--- @field layer integer Determines the order in which Addons are called.
--- @field enabled boolean Whether the Addon is enabled by default.
--- @field handler boolean If true, Addon has access to the handler.
--- @field basename string Autogenerated.
--- @field filename string Autogenerated.

--- @class AddonHandlerProxy

--- @class Addon
--- @field info AddonInfo
--- @field custom_layer? integer
--- @field GetInfo (fun(handler: Addon): AddonInfoPacket)?
--- @field Initialize fun(handler: Addon)?
--- @field Shutdown fun(handler: Addon)?
--- @field Save fun(handler: Addon, zip: table)? Called when the game is saved.
--- @field Load fun(handler: Addon, zip: table)? Called after GamePreload and before GameStart.
--- @field Pong fun(handler: Addon, pingTag: integer, pktSendTime: number, pktRecvTime: number)? Called when a pong response is received.
--- @field GameSetup (fun(handler: Addon, state: string, ready: boolean, playerStates: table): boolean, boolean)? Called to set up the game before it starts.
--- @field GamePreload fun(handler: Addon)? Called before the 0 gameframe.
--- @field GameStart fun(handler: Addon)? Called upon the start of the game.
--- @field GameOver fun(handler: Addon, winningAllyTeams: integer[])? Called when the game ends.
--- @field GameFrame fun(handler: Addon, frameNum: integer)? Called for every game simulation frame (30 per second).
--- @field GameFramePost fun(handler: Addon, frameNum: integer)? Called at the end of every game simulation frame.
--- @field GamePaused fun(handler: Addon, playerID: integer, paused: boolean)? Called when the game is paused.
--- @field GameProgress fun(handler: Addon, serverFrameNum: integer)? Called every 60 frames, calculating delta between GameFrame and GameProgress.
--- @field GameID fun(handler: Addon, gameID: string)? Called once to deliver the gameID.
--- @field PlayerChanged fun(handler: Addon, playerID: integer)? Called whenever a player's status changes.
--- @field PlayerAdded fun(handler: Addon, playerID: integer)? Called whenever a new player joins the game.
--- @field PlayerRemoved fun(handler: Addon, playerID: integer, reason: string)? Called whenever a player is removed from the game.
--- @field TeamDied fun(handler: Addon, teamID: integer)? Called when a team dies.
--- @field TeamChanged fun(handler: Addon, teamID: integer)? Called when a team changes.
--- @field UnitCreated fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, builderID: integer?)? Called at the moment the unit is created.
--- @field UnitFinished fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called at the moment the unit is completed.
--- @field UnitFromFactory fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, factID: integer, factDefID: integer, userOrders: boolean)? Called when a factory finishes construction of a unit.
--- @field UnitReverseBuilt fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called when a living unit becomes a nanoframe again.
--- @field UnitConstructionDecayed fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, timeSinceLastBuild: number, iterationPeriod: number, part: number)? Called when a unit being built starts decaying.
--- @field UnitDestroyed fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, attackerID: integer, attackerDefID: integer, attackerTeam: integer, weaponDefID: integer)? Called when a unit is destroyed.
--- @field RenderUnitDestroyed fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called just before a unit is invalid, after it finishes its death animation.
--- @field UnitExperience fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, experience: number, oldExperience: number)? Called when a unit gains experience.
--- @field UnitIdle fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called when a unit is idle (empty command queue).
--- @field UnitCmdDone fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, cmdID: integer, cmdParams: table, options: table, cmdTag: integer)? Called when a unit completes a command.
--- @field UnitPreDamaged (fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, damage: number, paralyzer: number, weaponDefID: integer, projectileID: integer, attackerID: integer, attackerDefID: integer, attackerTeam: integer): number, number)? Called before a unit is damaged.
--- @field UnitDamaged fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, damage: number, paralyzer: number, weaponDefID: integer, projectileID: integer, attackerID: integer, attackerDefID: integer, attackerTeam: integer)? Called when a unit is damaged (after UnitPreDamaged).
--- @field UnitStunned fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, stunned: boolean)? Called when a unit changes its stun status.
--- @field UnitTaken fun(handler: Addon, unitID: integer, unitDefID: integer, oldTeam: integer, newTeam: integer)? Called when a unit is transferred between teams (before UnitGiven).
--- @field UnitGiven fun(handler: Addon, unitID: integer, unitDefID: integer, newTeam: integer, oldTeam: integer)? Called when a unit is transferred between teams (after UnitTaken).
--- @field UnitEnteredRadar fun(handler: Addon, unitID: integer, unitTeam: integer, allyTeam: integer, unitDefID: integer)? Called when a unit enters radar of an allyteam.
--- @field UnitEnteredLos fun(handler: Addon, unitID: integer, unitTeam: integer, allyTeam: integer, unitDefID: integer)? Called when a unit enters LOS of an allyteam.
--- @field UnitLeftRadar fun(handler: Addon, unitID: integer, unitTeam: integer, allyTeam: integer, unitDefID: integer)? Called when a unit leaves radar of an allyteam.
--- @field UnitLeftLos fun(handler: Addon, unitID: integer, unitTeam: integer, allyTeam: integer, unitDefID: integer)? Called when a unit leaves LOS of an allyteam.
--- @field UnitSeismicPing fun(handler: Addon, x: number, y: number, z: number, strength: number, allyTeam: integer, unitID: integer, unitDefID: integer)? Called when a unit emits a seismic ping.
--- @field UnitLoaded fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, transportID: integer, transportTeam: integer)? Called when a unit is loaded by a transport.
--- @field UnitUnloaded fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, transportID: integer, transportTeam: integer)? Called when a unit is unloaded by a transport.
--- @field UnitCloaked fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called when a unit cloaks.
--- @field UnitDecloaked fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called when a unit decloaks.
--- @field UnitUnitCollision fun(handler: Addon, colliderID: integer, collideeID: integer): boolean?? Called when two units collide.
--- @field UnitFeatureCollision fun(handler: Addon, colliderID: integer, collideeID: integer): boolean?? Called when a unit collides with a feature.
--- @field UnitMoveFailed fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called when a unit move fails.
--- @field UnitMoved fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called when a unit moves.
--- @field UnitEnteredAir fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called when a unit enters air.
--- @field UnitLeftAir fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called when a unit leaves air.
--- @field UnitEnteredWater fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called when a unit enters water.
--- @field UnitLeftWater fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called when a unit leaves water.
--- @field UnitEnteredUnderwater fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called when a unit enters underwater.
--- @field UnitLeftUnderwater fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called when a unit leaves underwater.
--- @field UnitCommand fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, cmdID: integer, cmdParams: table, options: table, cmdTag: integer)? Called after a unit accepts a command.
--- @field UnitHarvestStorageFull fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer)? Called when a unit's harvestStorage is full.
--- @field StockpileChanged fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, weaponNum: integer, oldCount: integer, newCount: integer)? Called when a unit's stockpile of weapons changes.
--- @field FeatureCreated fun(handler: Addon, featureID: integer, allyTeamID: integer)? Called when a feature is created.
--- @field FeatureDestroyed fun(handler: Addon, featureID: integer, allyTeamID: integer)? Called when a feature is destroyed.
--- @field FeatureDamaged fun(handler: Addon, featureID: integer, featureDefID: integer, featureTeam: integer, damage: number, weaponDefID: integer, projectileID: integer, attackerID: integer, attackerDefID: integer, attackerTeam: integer)? Called when a feature is damaged.
--- @field FeatureMoved fun(handler: Addon, featureID: integer, featureDefID: integer, featureTeam: integer)? Called when a feature moves.
--- @field FeaturePreDamaged (fun(handler: Addon, featureID: integer, featureDefID: integer, featureTeam: integer, damage: number, weaponDefID: integer, projectileID: integer, attackerID: integer, attackerDefID: integer, attackerTeam: integer): number, number)? Called before a feature is damaged.
--- @field ProjectileCreated fun(handler: Addon, proID: integer, proOwnerID: integer, weaponDefID: integer)? Called when a projectile is created.
--- @field ProjectileDestroyed fun(handler: Addon, proID: integer, ownerID: integer, proWeaponDefID: integer)? Called when a projectile is destroyed.
--- @field ShieldPreDamaged (fun(handler: Addon, proID: integer, proOwnerID: integer, shieldEmitterWeapNum: integer, shieldCarrierUnitID: integer, bounceProj: boolean, beamEmitterWeapNum: integer, beamEmitterUnitID: integer, spx: number, spy: number, spz: number, hpx: number, hpy: number, hpz: number): boolean?)? Called before a shield is damaged.
--- @field AllowCommand fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, cmdID: integer, cmdParams: table, options: table, cmdTag: integer, playerID: integer, fromSynced: boolean, fromLua: boolean): boolean? Called to determine if a command is allowed.
--- @field AllowStartPosition fun(handler: Addon, playerID: integer, teamID: integer, readyState: integer, cx: number, cy: number, cz: number, rx: number, ry: number, rz: number): boolean? Called to determine if a start position is allowed.
--- @field AllowUnitCreation fun(handler: Addon, unitDefID: integer, builderID: integer, builderTeam: integer, x: number, y: number, z: number, facing: integer): boolean, boolean? Called to determine if a unit creation is allowed.
--- @field AllowUnitTransfer fun(handler: Addon, unitID: integer, unitDefID: integer, oldTeam: integer, newTeam: integer, capture: boolean): boolean? Called to determine if a unit transfer is allowed.
--- @field AllowUnitBuildStep fun(handler: Addon, builderID: integer, builderTeam: integer, unitID: integer, unitDefID: integer, part: number): boolean? Called to determine if a unit build step is allowed.
--- @field AllowUnitCaptureStep fun(handler: Addon, builderID: integer, builderTeam: integer, unitID: integer, unitDefID: integer, part: number): boolean? Called to determine if a unit capture step is allowed.
--- @field AllowUnitTransport fun(handler: Addon, transporterID: integer, transporterUnitDefID: integer, transporterTeam: integer, transporteeID: integer, transporteeUnitDefID: integer, transporteeTeam: integer): boolean? Called to determine if a unit transport is allowed.
--- @field AllowUnitTransportLoad (fun(handler: Addon, transporterID: integer, transporterUnitDefID: integer, transporterTeam: integer, transporteeID: integer, transporteeUnitDefID: integer, transporteeTeam: integer, loadPosX: number, loadPosY: number, loadPosZ: number): boolean)? Called to determine if a unit transport load is allowed.
--- @field AllowUnitTransportUnload (fun(handler: Addon, transporterID: integer, transporterUnitDefID: integer, transporterTeam: integer, transporteeID: integer, transporteeUnitDefID: integer, transporteeTeam: integer, unloadPosX: number, unloadPosY: number, unloadPosZ: number): boolean)? Called to determine if a unit transport unload is allowed.
--- @field AllowUnitCloak fun(handler: Addon, unitID: integer, enemyID: integer): boolean? Called to determine if a unit can cloak.
--- @field AllowUnitDecloak (fun(handler: Addon, unitID: integer, objectID: integer, weaponID: integer): boolean)? Called to determine if a unit can decloak.
--- @field AllowUnitKamikaze (fun(handler: Addon, unitID: integer, targetID: integer): boolean)? Called to determine if a unit can kamikaze.
--- @field AllowFeatureBuildStep (fun(handler: Addon, builderID: integer, builderTeam: integer, featureID: integer, featureDefID: integer, part: number): boolean)? Called to determine if a feature build step is allowed.
--- @field AllowFeatureCreation (fun(handler: Addon, featureDefID: integer, teamID: integer, x: number, y: number, z: number): boolean)? Called to determine if a feature creation is allowed.
--- @field AllowResourceLevel (fun(handler: Addon, teamID: integer, res: string, level: number): boolean)? Called to determine if a resource level is allowed.
--- @field AllowResourceTransfer (fun(handler: Addon, oldTeamID: integer, newTeamID: integer, res: string, amount: number): boolean)? Called to determine if a resource transfer is allowed.
--- @field AllowDirectUnitControl (fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, playerID: integer): boolean)? Called to determine if direct unit control is allowed.
--- @field AllowBuilderHoldFire (fun(handler: Addon, unitID: integer, unitDefID: integer, action: string): boolean)? Called to determine if builder hold fire is allowed.
--- @field AllowWeaponTargetCheck (fun(handler: Addon, attackerID: integer, attackerWeaponNum: integer, attackerWeaponDefID: integer): boolean, boolean)? Called to determine if a weapon target check is allowed.
--- @field AllowWeaponTarget (fun(handler: Addon, attackerID: integer, targetID: integer, attackerWeaponNum: integer, attackerWeaponDefID: integer, defPriority: number): boolean, number)? Called to determine if a weapon target is allowed.
--- @field AllowWeaponInterceptTarget (fun(handler: Addon, interceptorUnitID: integer, interceptorWeaponNum: integer, interceptorTargetID: integer): boolean)? Called to determine if a weapon intercept target is allowed.
--- @field Explosion (fun(handler: Addon, weaponDefID: integer, px: number, py: number, pz: number, attackerID: integer, projectileID: integer): boolean?)? Called when an explosion occurs.
--- @field CommandFallback (fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, cmdID: integer, cmdParams: table, cmdOptions: table, cmdTag: integer): boolean?, boolean?)? Called when a command fallback is needed.
--- @field MoveCtrlNotify (fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, data: any): boolean)? Called when a move control notification is received.
--- @field TerraformComplete (fun(handler: Addon, unitID: integer, unitDefID: integer, unitTeam: integer, buildUnitID: integer, buildUnitDefID: integer, buildUnitTeam: integer): boolean)? Called when terraforming is complete.
--- @field GotChatMsg (fun(handler: Addon, msg: string, playerID: integer): boolean)? Called when a player issues a UI command.
--- @field RecvLuaMsg (fun(handler: Addon, msg: string, playerID: integer): boolean)? Receives messages from unsynced sent via Spring.SendLuaRulesMsg or Spring.SendLuaUIMsg.
--- @field Update fun(handler: Addon, dt: number)? Called for every draw frame and at least once per sim frame except when catching up.
--- @field UnsyncedHeightMapUpdate (fun(handler: Addon): number, number, number, number)? Called when the unsynced copy of the height-map is altered.
--- @field DrawGenesis fun(handler: Addon)? Use this callin to update textures, shaders, etc.
--- @field DrawWorld fun(handler: Addon)? Spring draws command queues, 'map stuff', and map marks.
--- @field DrawWorldPreUnit fun(handler: Addon)? Spring draws units, features, some water types, cloaked units, and the sun.
--- @field DrawOpaqueUnitsLua fun(handler: Addon, deferredPass: boolean, drawReflection: boolean, drawRefraction: boolean)? Called for opaque unit drawing.
--- @field DrawOpaqueFeaturesLua fun(handler: Addon, deferredPass: boolean, drawReflection: boolean, drawRefraction: boolean)? Called for opaque feature drawing.
--- @field DrawAlphaUnitsLua fun(handler: Addon, drawReflection: boolean, drawRefraction: boolean)? Called for alpha unit drawing.
--- @field DrawAlphaFeaturesLua fun(handler: Addon, drawReflection: boolean, drawRefraction: boolean)? Called for alpha feature drawing.
--- @field DrawShadowUnitsLua fun(handler: Addon)? Called for shadow unit drawing.
--- @field DrawShadowFeaturesLua fun(handler: Addon)? Called for shadow feature drawing.
--- @field DrawPreDecals fun(handler: Addon)? Called before decals are drawn.
--- @field DrawWorldPreParticles fun(handler: Addon, drawAboveWater: boolean, drawBelowWater: boolean, drawReflection: boolean, drawRefraction: boolean)? Called multiple times per draw frame for different permutations.
--- @field DrawWorldShadow fun(handler: Addon)? Called for world shadow drawing.
--- @field DrawWorldReflection fun(handler: Addon)? Called for world reflection drawing.
--- @field DrawWorldRefraction fun(handler: Addon)? Called for world refraction drawing.
--- @field DrawGroundPreForward fun(handler: Addon)? Runs at the start of the forward pass.
--- @field DrawGroundPostForward fun(handler: Addon)? Runs at the end of the forward pass.
--- @field DrawGroundPreDeferred fun(handler: Addon)? Runs at the start of the deferred pass.
--- @field DrawGroundDeferred fun(handler: Addon)? Runs during the deferred pass.
--- @field DrawGroundPostDeferred fun(handler: Addon)? Runs at the end of the deferred pass.
--- @field DrawUnitsPostDeferred fun(handler: Addon)? Runs at the end of the unit deferred pass.
--- @field DrawFeaturesPostDeferred fun(handler: Addon)? Runs at the end of the feature deferred pass.
--- @field DrawScreenEffects fun(handler: Addon, viewSizeX: number, viewSizeY: number)? Called for screen effects.
--- @field DrawScreenPost fun(handler: Addon, viewSizeX: number, viewSizeY: number)? Called after the frame is completely rendered.
--- @field DrawScreen fun(handler: Addon, viewSizeX: number, viewSizeY: number)? Called for screen drawing.
--- @field DrawInMiniMap fun(handler: Addon, sx: number, sy: number)? Called for minimap drawing.
--- @field FontsChanged fun(handler: Addon)? Called whenever fonts are updated.
--- @field SunChanged fun(handler: Addon)? Called when the sun changes.
--- @field RecvFromSynced fun(handler: Addon, ...)? Receives messages from synced code.
--- @field RecvSkirmishAIMessage fun(handler: Addon, aiTeam: integer, dataStr: string): any? Called when a message is received from a Skirmish AI.
--- @field DefaultCommand fun(handler: Addon, type: string, id: integer): any? Used to set the default command when a unit is selected.
--- @field ActiveCommandChanged fun(handler: Addon, cmdId: integer, cmdType: integer)? Called when a command is issued.
--- @field CameraRotationChanged fun(handler: Addon, rotX: number, rotY: number, rotZ: number)? Called whenever the camera rotation changes.
--- @field CameraPositionChanged fun(handler: Addon, posX: number, posY: number, posZ: number)? Called whenever the camera position changes.
--- @field CommandNotify fun(handler: Addon, cmdID: integer, cmdParams: table, options: table): boolean? Called when a command is issued.
--- @field ViewResize fun(handler: Addon, viewSizeX: number, viewSizeY: number)? Called whenever the window is resized.
--- @field LayoutButtons fun(handler: Addon, ...)? Called to layout buttons.
--- @field ConfigureLayout fun(handler: Addon, ...)? Called to configure layout.
--- @field AddConsoleLine fun(handler: Addon, msg: string, priority: integer)? Called when text is entered into the console.
--- @field GroupChanged fun(handler: Addon, groupID: integer)? Called when a unit is added to or removed from a control group.
--- @field KeyPress (fun(handler: Addon, keyCode: number, mods: table, isRepeat: boolean, label: boolean, utf32char: number, scanCode: number, actionList: table): boolean)? Called repeatedly when a key is pressed down.
--- @field KeyRelease (fun(handler: Addon, keyCode: number, mods: table, label: boolean, utf32char: number, scanCode: number, actionList: table): boolean)? Called when the key is released.
--- @field TextInput (fun(handler: Addon, utf8char: string): boolean)? Called whenever a key press results in text input.
--- @field TextEditing (fun(handler: Addon, utf8: string, start: number, length: number))? Called when text is being edited.
--- @field MousePress (fun(handler: Addon, x: number, y: number, button: number): boolean)? Called when a mouse button is pressed.
--- @field MouseRelease (fun(handler: Addon, x: number, y: number, button: number): boolean)? Called when a mouse button is released.
--- @field MouseMove fun(handler: Addon, x: number, y: number, dx: number, dy: number, button: number)? Called when the mouse is moved.
--- @field MouseWheel fun(handler: Addon, up: boolean, value: number)? Called when the mouse wheel is moved.
--- @field IsAbove (fun(handler: Addon, x: number, y: number): boolean)? Called every Update. Must return true for Mouse* events and Spring.GetToolTip to be called.
--- @field GetTooltip (fun(handler: Addon, x: number, y: number): string)? Called when Spring.IsAbove returns true.
--- @field WorldTooltip fun(handler: Addon, ...)? Called to provide a world tooltip.
--- @field MapDrawCmd (fun(handler: Addon, playerID: integer, type: string, posX: number, posY: number, posZ: number, label: string): boolean)? Called when a map draw command is issued.
--- @field ShockFront fun(handler: Addon, ...)? Called for shock front events.
--- @field DownloadQueued fun(handler: Addon, id: integer, name: string, type: string)? Called when a download is queued.
--- @field DownloadStarted fun(handler: Addon, id: integer)? Called when a download is started.
--- @field DownloadFinished fun(handler: Addon, id: integer)? Called when a download finishes successfully.
--- @field DownloadFailed fun(handler: Addon, id: integer, errorID: integer)? Called when a download fails to complete.
--- @field DownloadProgress fun(handler: Addon, id: integer, downloaded: integer, total: integer)? Called incrementally during a download.
